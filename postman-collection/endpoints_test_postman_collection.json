{
	"info": {
		"_postman_id": "a282c67e-8525-41c7-81f0-d725dd3102bf",
		"name": "Users API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27709058",
		"_collection_link": "https://www.postman.com/arachnoplov/workspace/yellow-team/collection/27709058-a282c67e-8525-41c7-81f0-d725dd3102bf?action=share&source=collection_link&creator=27709058"
	},
	"item": [
		{
			"name": "User List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 401\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 401]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields - id, age, surname, and name\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user).to.have.property('id');\r",
							"        pm.expect(user).to.have.property('age');\r",
							"        pm.expect(user).to.have.property('surname');\r",
							"        pm.expect(user).to.have.property('name');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  responseData.forEach(function(user) {\r",
							"    pm.expect(user.id).to.be.a('number').and.to.be.at.least(0, \"Id should be a non-negative integer\");\r",
							"  });\r",
							"});\r",
							"\r",
							"pm.test(\"Age should be a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(user) {\r",
							"    pm.expect(user.age).to.be.a('number').and.to.satisfy((age) => age >= 0, \"Age should be a non-negative integer\");\r",
							"  });\r",
							"});\r",
							"\r",
							"pm.test(\"Surname and name should be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  \r",
							"  responseData.forEach(function(user) {\r",
							"    pm.expect(user.surname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Surname should not be empty\");\r",
							"    pm.expect(user.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"  var schema = {\r",
							"    type: \"array\",\r",
							"    items: {\r",
							"      type: \"object\",\r",
							"      properties: {\r",
							"        id: { type: \"number\" },\r",
							"        age: { type: \"number\" },\r",
							"        surname: { type: \"string\" },\r",
							"        name: { type: \"string\" }\r",
							"      },\r",
							"      required: [\"id\", \"age\", \"surname\", \"name\"]\r",
							"    }\r",
							"  };\r",
							"\r",
							"  var response = pm.response.json();\r",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{API_URL}}/Users",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"Users"
					]
				}
			},
			"response": []
		},
		{
			"name": "User By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response has the required fields - id, age, surname, and name\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"    pm.expect(responseData.age).to.exist;\r",
							"    pm.expect(responseData.surname).to.exist;\r",
							"    pm.expect(responseData.name).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Age is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.age).to.exist.and.to.be.a('number');\r",
							"  pm.expect(responseData.age).to.satisfy((age) => age >= 0, \"Age must be a non-negative integer\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Surname is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.surname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Surname should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"  var schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"      id: {\r",
							"        type: \"number\"\r",
							"      },\r",
							"      age: {\r",
							"        type: \"number\"\r",
							"      },\r",
							"      surname: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      name: {\r",
							"        type: \"string\"\r",
							"      }\r",
							"    },\r",
							"    required: [\"id\", \"age\", \"surname\", \"name\"],\r",
							"  };\r",
							"\r",
							"  var response = pm.response.json();\r",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{API_URL}}/Users/{{userId}}",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"Users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Edit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"surname\": \"admin put\",\r\n    \"name\": \"admin\",\r\n    \"age\": 8,\r\n    \"password\": \"123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/Users",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"Users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Activity List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 401\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 401]);\r",
							"});\r",
							"\r",
							"pm.test(\"Description is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");\r",
							"  });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{API_URL}}/UserActivity",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"UserActivity"
					]
				}
			},
			"response": []
		},
		{
			"name": "Activity Add",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"description\": \"Test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/UserActivity",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"UserActivity"
					]
				}
			},
			"response": []
		},
		{
			"name": "Activity By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - userId and description\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('userId');",
							"  pm.expect(responseData).to.have.property('description');",
							"});",
							"",
							"",
							"pm.test(\"UserId is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.userId).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Description is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is UTF-8\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"UTF-8\");",
							"});",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      userId: {",
							"        type: \"number\",",
							"        minimum: 0",
							"      },",
							"      description: {",
							"        type: \"string\",",
							"        minLength: 1",
							"      }",
							"    },",
							"    required: [\"userId\", \"description\"],",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "123",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/UserActivity/4",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"UserActivity",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Activity Edit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\" : 4,\r\n    \"userId\" : 1,\r\n    \"description\": \"id 4\",\r\n    \"date_time\" : \"2024-03-20 07:58:35.0\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/UserActivity",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"UserActivity"
					]
				}
			},
			"response": []
		},
		{
			"name": "Activity Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{API_URL}}/UserActivity/{{activityId}}",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"UserActivity",
						"{{activityId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{API_URL}}/users/{{userId}}",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "API_URL",
			"value": "http://34.83.136.212:8085/front"
		},
		{
			"key": "userId",
			"value": "1"
		},
		{
			"key": "activityId",
			"value": ""
		},
		{
			"key": "username",
			"value": "admin"
		},
		{
			"key": "password",
			"value": "123"
		}
	]
}